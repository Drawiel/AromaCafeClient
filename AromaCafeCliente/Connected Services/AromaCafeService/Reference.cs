//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AromaCafeCliente.AromaCafeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/AromaCafeService.Models")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployeeAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployeeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeAddress {
            get {
                return this.EmployeeAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeAddressField, value) != true)) {
                    this.EmployeeAddressField = value;
                    this.RaisePropertyChanged("EmployeeAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeId {
            get {
                return this.EmployeeIdField;
            }
            set {
                if ((this.EmployeeIdField.Equals(value) != true)) {
                    this.EmployeeIdField = value;
                    this.RaisePropertyChanged("EmployeeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployeeType {
            get {
                return this.EmployeeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployeeTypeField, value) != true)) {
                    this.EmployeeTypeField = value;
                    this.RaisePropertyChanged("EmployeeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PostalCode {
            get {
                return this.PostalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostalCodeField, value) != true)) {
                    this.PostalCodeField = value;
                    this.RaisePropertyChanged("PostalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/AromaCafeService.Models")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> UnitPriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((this.ProductIdField.Equals(value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductType {
            get {
                return this.ProductTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductTypeField, value) != true)) {
                    this.ProductTypeField = value;
                    this.RaisePropertyChanged("ProductType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> UnitPrice {
            get {
                return this.UnitPriceField;
            }
            set {
                if ((this.UnitPriceField.Equals(value) != true)) {
                    this.UnitPriceField = value;
                    this.RaisePropertyChanged("UnitPrice");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AromaCafeService.IEmployeeManager")]
    public interface IEmployeeManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/UpdateProfile", ReplyAction="http://tempuri.org/IEmployeeManager/UpdateProfileResponse")]
        int UpdateProfile(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/UpdateProfile", ReplyAction="http://tempuri.org/IEmployeeManager/UpdateProfileResponse")]
        System.Threading.Tasks.Task<int> UpdateProfileAsync(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/RegisterEmployee", ReplyAction="http://tempuri.org/IEmployeeManager/RegisterEmployeeResponse")]
        string RegisterEmployee(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/RegisterEmployee", ReplyAction="http://tempuri.org/IEmployeeManager/RegisterEmployeeResponse")]
        System.Threading.Tasks.Task<string> RegisterEmployeeAsync(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/DisableEmployee", ReplyAction="http://tempuri.org/IEmployeeManager/DisableEmployeeResponse")]
        int DisableEmployee(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/DisableEmployee", ReplyAction="http://tempuri.org/IEmployeeManager/DisableEmployeeResponse")]
        System.Threading.Tasks.Task<int> DisableEmployeeAsync(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/GetAllEmployee", ReplyAction="http://tempuri.org/IEmployeeManager/GetAllEmployeeResponse")]
        AromaCafeCliente.AromaCafeService.Employee[] GetAllEmployee();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/GetAllEmployee", ReplyAction="http://tempuri.org/IEmployeeManager/GetAllEmployeeResponse")]
        System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Employee[]> GetAllEmployeeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/GetEmployeeInformation", ReplyAction="http://tempuri.org/IEmployeeManager/GetEmployeeInformationResponse")]
        AromaCafeCliente.AromaCafeService.Employee GetEmployeeInformation(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/GetEmployeeInformation", ReplyAction="http://tempuri.org/IEmployeeManager/GetEmployeeInformationResponse")]
        System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Employee> GetEmployeeInformationAsync(int employeeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/UpdateAccessCodeProfile", ReplyAction="http://tempuri.org/IEmployeeManager/UpdateAccessCodeProfileResponse")]
        string UpdateAccessCodeProfile(AromaCafeCliente.AromaCafeService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployeeManager/UpdateAccessCodeProfile", ReplyAction="http://tempuri.org/IEmployeeManager/UpdateAccessCodeProfileResponse")]
        System.Threading.Tasks.Task<string> UpdateAccessCodeProfileAsync(AromaCafeCliente.AromaCafeService.Employee employee);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeManagerChannel : AromaCafeCliente.AromaCafeService.IEmployeeManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeManagerClient : System.ServiceModel.ClientBase<AromaCafeCliente.AromaCafeService.IEmployeeManager>, AromaCafeCliente.AromaCafeService.IEmployeeManager {
        
        public EmployeeManagerClient() {
        }
        
        public EmployeeManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int UpdateProfile(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.UpdateProfile(employee);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProfileAsync(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.UpdateProfileAsync(employee);
        }
        
        public string RegisterEmployee(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.RegisterEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<string> RegisterEmployeeAsync(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.RegisterEmployeeAsync(employee);
        }
        
        public int DisableEmployee(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.DisableEmployee(employee);
        }
        
        public System.Threading.Tasks.Task<int> DisableEmployeeAsync(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.DisableEmployeeAsync(employee);
        }
        
        public AromaCafeCliente.AromaCafeService.Employee[] GetAllEmployee() {
            return base.Channel.GetAllEmployee();
        }
        
        public System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Employee[]> GetAllEmployeeAsync() {
            return base.Channel.GetAllEmployeeAsync();
        }
        
        public AromaCafeCliente.AromaCafeService.Employee GetEmployeeInformation(int employeeId) {
            return base.Channel.GetEmployeeInformation(employeeId);
        }
        
        public System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Employee> GetEmployeeInformationAsync(int employeeId) {
            return base.Channel.GetEmployeeInformationAsync(employeeId);
        }
        
        public string UpdateAccessCodeProfile(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.UpdateAccessCodeProfile(employee);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAccessCodeProfileAsync(AromaCafeCliente.AromaCafeService.Employee employee) {
            return base.Channel.UpdateAccessCodeProfileAsync(employee);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AromaCafeService.ILogInManager")]
    public interface ILogInManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/ValidateCredentials", ReplyAction="http://tempuri.org/ILogInManager/ValidateCredentialsResponse")]
        AromaCafeCliente.AromaCafeService.Employee ValidateCredentials(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/ValidateCredentials", ReplyAction="http://tempuri.org/ILogInManager/ValidateCredentialsResponse")]
        System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Employee> ValidateCredentialsAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/OpenTurn", ReplyAction="http://tempuri.org/ILogInManager/OpenTurnResponse")]
        int OpenTurn(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/OpenTurn", ReplyAction="http://tempuri.org/ILogInManager/OpenTurnResponse")]
        System.Threading.Tasks.Task<int> OpenTurnAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/CloseTurn", ReplyAction="http://tempuri.org/ILogInManager/CloseTurnResponse")]
        int CloseTurn(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/CloseTurn", ReplyAction="http://tempuri.org/ILogInManager/CloseTurnResponse")]
        System.Threading.Tasks.Task<int> CloseTurnAsync(string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/CheckTurnOpened", ReplyAction="http://tempuri.org/ILogInManager/CheckTurnOpenedResponse")]
        int CheckTurnOpened(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInManager/CheckTurnOpened", ReplyAction="http://tempuri.org/ILogInManager/CheckTurnOpenedResponse")]
        System.Threading.Tasks.Task<int> CheckTurnOpenedAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogInManagerChannel : AromaCafeCliente.AromaCafeService.ILogInManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogInManagerClient : System.ServiceModel.ClientBase<AromaCafeCliente.AromaCafeService.ILogInManager>, AromaCafeCliente.AromaCafeService.ILogInManager {
        
        public LogInManagerClient() {
        }
        
        public LogInManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogInManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogInManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogInManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AromaCafeCliente.AromaCafeService.Employee ValidateCredentials(string username, string password) {
            return base.Channel.ValidateCredentials(username, password);
        }
        
        public System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Employee> ValidateCredentialsAsync(string username, string password) {
            return base.Channel.ValidateCredentialsAsync(username, password);
        }
        
        public int OpenTurn(string username) {
            return base.Channel.OpenTurn(username);
        }
        
        public System.Threading.Tasks.Task<int> OpenTurnAsync(string username) {
            return base.Channel.OpenTurnAsync(username);
        }
        
        public int CloseTurn(string password) {
            return base.Channel.CloseTurn(password);
        }
        
        public System.Threading.Tasks.Task<int> CloseTurnAsync(string password) {
            return base.Channel.CloseTurnAsync(password);
        }
        
        public int CheckTurnOpened(string username) {
            return base.Channel.CheckTurnOpened(username);
        }
        
        public System.Threading.Tasks.Task<int> CheckTurnOpenedAsync(string username) {
            return base.Channel.CheckTurnOpenedAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AromaCafeService.IProductManager")]
    public interface IProductManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManager/GetAllProducts", ReplyAction="http://tempuri.org/IProductManager/GetAllProductsResponse")]
        AromaCafeCliente.AromaCafeService.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManager/GetAllProducts", ReplyAction="http://tempuri.org/IProductManager/GetAllProductsResponse")]
        System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManager/AddProduct", ReplyAction="http://tempuri.org/IProductManager/AddProductResponse")]
        int AddProduct(AromaCafeCliente.AromaCafeService.Product newProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManager/AddProduct", ReplyAction="http://tempuri.org/IProductManager/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(AromaCafeCliente.AromaCafeService.Product newProduct);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManager/IncreaseStock", ReplyAction="http://tempuri.org/IProductManager/IncreaseStockResponse")]
        int IncreaseStock(int productId, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductManager/IncreaseStock", ReplyAction="http://tempuri.org/IProductManager/IncreaseStockResponse")]
        System.Threading.Tasks.Task<int> IncreaseStockAsync(int productId, int quantity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductManagerChannel : AromaCafeCliente.AromaCafeService.IProductManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductManagerClient : System.ServiceModel.ClientBase<AromaCafeCliente.AromaCafeService.IProductManager>, AromaCafeCliente.AromaCafeService.IProductManager {
        
        public ProductManagerClient() {
        }
        
        public ProductManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AromaCafeCliente.AromaCafeService.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<AromaCafeCliente.AromaCafeService.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public int AddProduct(AromaCafeCliente.AromaCafeService.Product newProduct) {
            return base.Channel.AddProduct(newProduct);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(AromaCafeCliente.AromaCafeService.Product newProduct) {
            return base.Channel.AddProductAsync(newProduct);
        }
        
        public int IncreaseStock(int productId, int quantity) {
            return base.Channel.IncreaseStock(productId, quantity);
        }
        
        public System.Threading.Tasks.Task<int> IncreaseStockAsync(int productId, int quantity) {
            return base.Channel.IncreaseStockAsync(productId, quantity);
        }
    }
}
